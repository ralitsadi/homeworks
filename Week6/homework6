
(define (take-while p items)
  (cond
    [(empty? items) (list)]
    [(p (first items)) (cons (first items) (take-while p (rest items)))]
    [else (list)])
  )
(define (drop-while p items)
  (cond
    [(empty? items) (list)]
    [(p (first items))(drop-while p (rest items))]
    [else items])
  )


(define (group l)
  (cond
    [(empty? l) (list)]
    [ else (cons (append (list (first l))(take-while (lambda ( x) (equal? x (first l))) (rest l))) (group (drop-while (lambda (x) (equal? x (first l))) (rest l)) ))]
    )
  )
