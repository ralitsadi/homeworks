
listToNumber::[Int] -> Int
listToNumber [] = 0
listToNumber (x:xs) = x * 10^(length xs) + listToNumber xs 

suffix :: (Eq a) => [a] -> [a] -> Bool 
suffix [] _ = False
suffix (x:xs) ys
 |(length (x:xs)) == (length ys) = (x:xs)==ys
 | length (x:xs) < length ys = False
 | otherwise = suffix xs ys

occurrences :: [Int] -> [Int] -> [Int]
occurrences [] _ = []
occurrences (x:xs) ys = (number x ys) : (occurrences xs ys)
 where 
  number x [] = 0
  number x (y:ys)
   |x==y = 1 + number x ys
   |otherwise = number x ys
   
removeAt :: Int -> [a] -> [a]
removeAt 0 (x:xs) = xs
removeAt i (x:xs) 
 |i < 0 || i > (length (x:xs) - 1) = error "Index Out Of Bound!"
 |otherwise = x:(removeAt (i-1) xs)

main :: IO()
main = do
 putStrLn("List to Number: ")
 print(listToNumber [3,5,4])
 print(listToNumber [1, 0, 2, 0, 3, 0])
 putStrLn("Suffix: ")
 print(suffix [4,6,5,7,7,8] [7,8])
 print(suffix [345,53,5] [345, 5])
 print(suffix [2,4] [2,6,2,5])
 print(suffix [] [1,3,6])
 putStrLn("Ocurrences: ")
 print(occurrences [1,2,3] [1,1,1,3,3,2])
 print(occurrences [] [3,4,6])
 print(occurrences [1,2,4] [6,7,8,9])
 print(occurrences [1,3,5] [])
 putStrLn("RemoveAt: ")
 print(removeAt 2 [3,5,6,3,5,73])
 print(removeAt (-8) [4,5,2])
 print(removeAt 3 [4,5,2])
